#	職業スクリプト
#	2025/04/12 skript 2.10.2に対応（エイリアスの追加、「on rightclick」の記載方法の変更）


# ◇■◇別名一覧（レガシ）◇■◇
# (25/10/06)将来エイリアス機能が消えるかもしれない。
# 対処法のリンクをここに貼っておく。
# https://github.com/SkriptLang/Skript/discussions/7349
aliases:

	#各種のテラコッタ
	any terracotta = terracotta , white_terracotta , orange_terracotta , magenta_terracotta , light_blue_terracotta , yellow_terracotta , lime_terracotta , pink_terracotta , gray_terracotta , light_gray_terracotta , cyan_terracotta , purple_terracotta , blue_terracotta , brown_terracotta , green_terracotta , red_terracotta , black_terracotta
	# 各種のコンクリート
	any concrete = white_concrete , orange_concrete , magenta_concrete , light_blue_concrete , yellow_concrete , lime_concrete , pink_concrete , gray_concrete , light_gray_concrete , cyan_concrete , purple_concrete , blue_concrete , brown_concrete , green_concrete , red_concrete , black_concrete
	# 各種の葉
	leaves = oak_leaves , spruce_leaves , birch_leaves , jungle_leaves , acacia_leaves , dark_oak_leaves , azalea_leaves , flowering_azalea_leaves , mangrove_leaves , cherry_leaves , nether_wart_block , warped_wart_block
	#各種の原木、幹
	any log = oak_log , spruce_log , birch_log , jungle_log , acacia_log , dark_oak_log , crimson_stem , warped_stem , mangrove_log , cherry_log, pale_oak_log
	# 各種のツルハシ
	any pickaxe = wooden_pickaxe , stone_pickaxe , iron_pickaxe , diamond_pickaxe , golden_pickaxe , netherite_pickaxe
	# 各種のシャベル
	any shovel = wooden_shovel , stone_shovel , iron_shovel , diamond_shovel , golden_shovel , netherite_shovel
	# 各種の斧
	any axe = wooden_axe , stone_axe , iron_axe , diamond_axe , golden_axe , netherite_axe
	# 各種のクワ
	any hoe = wooden_hoe , stone_hoe , iron_hoe , diamond_hoe , golden_hoe , netherite_hoe

	# 左官の特効ブロック 各種のテラコッタ，各種のコンクリート
	plastplast = any terracotta, any concrete
	# 樵夫の特効ブロック 各種の原木
	cutcut = any log, stripped crimson stem, stripped warped stem




on load:
	# -------------------------------------------------------------------------------
	# ◇■◇別名一覧◇■◇
	# ・Skriptで廃止される「エイリアス」に代わって，Minecraft平坦化に伴って公式に導入された「タグ」を利用するよう，SkriptLangから案内があった。
	# ・わかりやすい「タグ」一覧はこちら。
	# 　・ブロック： https://mcreator.net/wiki/minecraft-block-tags-list
	# 　・アイテム： https://mcreator.net/wiki/minecraft-item-tags-list
	# ・なければここで定義。
	# -------------------------------------------------------------------------------
	# 広域採掘エンチャントにて破壊対象となるブロック。
	register a block tag named "wide_mining_breakable" using cobblestone, sandstone, nether_brick, stone_bricks, bricks, purpur_block, quartz, red_sandstone, prismarine_bricks, prismarine, dark_prismarine, polished_granite, smooth_red_sandstone, mossy_stone_bricks, polished_diorite, mossy_cobblestone, end_stone_bricks, stone, smooth_sandstone, smooth_quartz, granite, andesite, red_nether_bricks, polished_andesite, diorite, blackstone, polished_blackstone_bricks, polished_blackstone, cobbled_deepslate, polished_deepslate, deepslate_tiles, deepslate_bricks, oxidized_cut_copper, weathered_cut_copper, exposed_cut_copper, cut_copper, waxed_weathered_cut_copper, waxed_exposed_cut_copper, waxed_cut_copper, waxed_oxidized_cut_copper, mud_bricks, deepslate and tuff
	# 坑夫が「倍数ドロップ」エンチャントのついた道具で採掘した場合に，ドロップが4倍量となるブロック。
	# ・石，丸石，安山岩，閃緑岩，花崗岩，黒曜石，ネザーラック，深層岩，方解石，ブラックストーン（ここまで，旧・minemine）
	# ・粘土，粗い土，耕地，草ブロック，土，砂利，菌糸，ポドゾル，赤い砂，砂，ソウルサンド，草の道，雪ブロック（ここまで，旧・digdig）
	# ・赤い砂岩，砂岩（ここまで，旧・digdigpick）
	# ・凝灰岩
	register a block tag named "miner_mining_specials" using stone, cobblestone, andesite, diorite, granite, obsidian, magma block, netherrack, deepslate, cobbled deepslate, calcite, blackstone, clay, coarse dirt, farmland, grass block, dirt, gravel, mycelium, podzol, red sand, sand, soul sand, dirt path, snow block, red sandstone, sandstone and tuff
	# 左官が「倍数ドロップ」エンチャントのついた道具で採掘した場合に，ドロップが4倍量となるブロック。
	# ・各種のテラコッタ，各種のコンクリート（ここまで，旧・plastplast）
	register a block tag named "plasterwork_mining_specials" using terracotta, white_terracotta, orange_terracotta, magenta_terracotta, light_blue_terracotta, yellow_terracotta, lime_terracotta, pink_terracotta, gray_terracotta, light_gray_terracotta, cyan_terracotta, purple_terracotta, blue_terracotta, brown_terracotta, green_terracotta, red_terracotta, black_terracotta, white_concrete, orange_concrete, magenta_concrete, light_blue_concrete, yellow_concrete, lime_concrete, pink_concrete, gray_concrete, light_gray_concrete, cyan_concrete, purple_concrete, blue_concrete, brown_concrete, green_concrete, red_concrete and black_concrete
	# -------------------------------------------------------------------------------
	# ◇■◇職業の定義◇■◇
	# -------------------------------------------------------------------------------
	delete {jobs::*}		# .skファイルを読み込み時，一度データを消した上で再定義
	# (無職の定義)
	set {jobs::unemployed::name} to "無職"
	set {jobs::unemployed::color} to "&7"
	set {jobs::unemployed::changeDescription} to "失職します。何もメリットはありません。"
	add " &7●&r 職のない状態です。何のメリットもありません。" to {jobs::unemployed::descriptions::*}
	# (樵夫の定義)
	set {jobs::lumberjack::name} to "樵夫"
	set {jobs::lumberjack::color} to "&a"
	set {jobs::lumberjack::changeDescription} to "木材生産に有利な樵夫（木こり）に転職できます。"
	add " &7●&r 当職に就くと，いわゆる「CutAll」を使用できます。" to {jobs::lumberjack::descriptions::*}
	add "  斧で原木を破壊することで，1本の木をまるごと伐採できます。" to {jobs::lumberjack::descriptions::*}
	add "  （斧には専用エンチャントが必要です）" to {jobs::lumberjack::descriptions::*}
	set {_pjrl} to {@per job rights lumberjack cutall}
	add "  CutAll利権を利用するごとに，利権値が &c%{_pjrl}%&r 消費されます。" to {jobs::lumberjack::descriptions::*}
	# (坑夫の定義)
	set {jobs::miner::name} to "坑夫"
	set {jobs::miner::color} to "&e"
	set {jobs::miner::changeDescription} to "土砂や石材の生産に有利な坑夫に転職できます。"
	add " &7●&r 当職に就くと，ツルハシで採集できる石材採集量がx4になります。" to {jobs::miner::descriptions::*}
	add "  （ツルハシには専用エンチャントが必要です）" to {jobs::miner::descriptions::*}
	set {_pjrm} to {@per job rights miner mining}
	add "  倍数ドロップ利権を利用するごとに，利権値が &c%{_pjrm}%&r 消費されます。" to {jobs::miner::descriptions::*}
	add " &7●&r 広域掘削利権を，利権値の消費なしでご利用いただけます。" to {jobs::miner::descriptions::*}
	# (左官の定義)
	set {jobs::plasterwork::name} to "左官"
	set {jobs::plasterwork::color} to "&b"
	set {jobs::plasterwork::changeDescription} to "高級建材の生産に有利な左官に転職できます。"
	set {jobs::plasterwork::description} to "左官"
	add " &7●&r 当職に就くと，ツルハシで採集できるテラコッタと" to {jobs::plasterwork::descriptions::*}
	add "  コンクリートがx3になります。" to {jobs::plasterwork::descriptions::*}
	add "  （ツルハシには専用エンチャントが必要です）" to {jobs::plasterwork::descriptions::*}
	set {_pjrp} to {@per job rights plasterwork mining}
	add "  倍数ドロップ利権を利用するごとに，利権値が &c%{_pjrp}%&r 消費されます。" to {jobs::plasterwork::descriptions::*}
	add " &7●&r 環境なしにどこでもコンクリートが生産可能な「簡易生成」が可能です。" to {jobs::plasterwork::descriptions::*}
	set {_rights} to {@per rights on marchant powder to concrete}
	add "  簡易生成利権を利用するごとに，利権値が &c%{_rights}%&r 消費されます。" to {jobs::plasterwork::descriptions::*}
	# -------------------------------------------------------------------------------
	# ◇■◇エンチャント 及び エンチャントの対象となる武器道具の定義◇■◇
	# ・ゲーム中のエンチャント実体は，データパック内で設定すること
	# -------------------------------------------------------------------------------
	delete {uniqueEnchants::*}	# .skファイルを読み込み時，一度データを消した上で再定義
	# 独自エンチャントの種類とエンチャントされる武器や道具
	set {uniqueEnchants::enchantable::*} to "cut_all", "gunslash", "special_drop", "wide_cultivate", "wide_harvest" and "wide_mining"
	set {uniqueEnchants::enchanted::*} to "axe", "boots", "chestplate", "helmet", "hoe", "leggings", "pickaxe", "shovel", "sword" and "shears"
	# -------------------------------------------------------------------------------
	# ◇■◇独自エンチャントの付与されたアイテムのデフォルト名◇■◇
	# -------------------------------------------------------------------------------
	delete {defaultBrand::*}	# .skファイルを読み込み時，一度データを消した上で再定義
	set {defaultBrand::cut_all::axe} to "<material>のチェーンソー"
	set {defaultBrand::gunslash::sword} to "<material>の銃剣"
	set {defaultBrand::gunslash::axe} to "<material>の銃斧"
	set {defaultBrand::special_drop::pickaxe} to "<material>の玄能と鉄矢"
	set {defaultBrand::special_drop::shovel} to "<material>の紐付きショベル"
	set {defaultBrand::wide_cultivate::hoe} to "<material>の備中グワ"
	set {defaultBrand::wide_harvest::shears} to "鎌"
	set {defaultBrand::wide_mining::pickaxe} to "<material>のドリル"


# ◇■◇オプション◇■◇
options:
	# 労働局の名称
	guild display name : "&7[&aArbeitsamt&7]&r"
	# 1日ごとに補充される利権数
	# 2025/04/12から当面の間、5000から10000に変更している。あとで戻すこと ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !
	job rights on day: 10000
	# 蓄積される利権数の最大値
	max job rights: 100000
	# 利権を1回行使するごとに消費される利権数（職種別）
	per job rights lumberjack cutall: 100		# 樵夫がカットオール利権を行使した場合
	per job rights miner mining: 50					# 坑夫が倍数ドロップ利権を行使した場合
	per job rights plasterwork mining: 50		# 左官が倍数ドロップ利権を行使した場合
	per job rights wide mining: 20					# （坑夫以外が）広域採掘利権を行使した場合（1レベル1ブロックあたり）
	# 特殊な取引時にかかる利権値
	per rights on marchant powder to concrete: 250		# ①コンクリートの簡易生成
	# 遡って給付が行われる最大日数
	days max G : 100000


# ◇■◇変数の初期値◇■◇
# ・各プレイヤーの初回ログイン時に設定する。variablesは使用しない（うまくいかない）。
on first join:
	set {guild::lastJobChangeDay::%the player's uuid%} to 0				# 前回に仕事を変更した日
	set {guild::jobRights::%the player's uuid%} to 50000					# 保有利権値
	set {guild::job::%the player's uuid%} to "unemployed"					# 職業
	set {guild::openedMerchantType::%the player's uuid%} to ""		# 現在開いている交易ウィンドウのタイプ










################################################################################
# コマンドの動作・GUI
################################################################################

# ◇■◇コマンド◇■◇
command /guild <string=wizard> [<string=null> [<string=null> <string=null>]]:
	aliases: /job
	trigger:
		set {_order} to arg-1
		# 第1引数"wizard"→ジョブ・利権関連の対話型プログラムを始動◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆
		if {_order} is "wizard":
			set {_action} to arg-2
			# 第2引数"null"→ウィザードの最初のメッセージ
			if {_action} is "null":
				# 1行目
				message "%{@guild display name}% こちら職業安定所です。ご用件をお選びください。" to the player
				# 2行目				
				add a new text component from " &7> " to {_m::*}
				set {_c} to a new text component from "&b&n転職したい&r"
				set click event of {_c} to a new click event to run command "/guild wizard change"
				add {_c} to {_m::*}
				add a new text component from " " to {_m::*}	# ただの空白
				set {_c} to a new text component from "&b&n説明を聞きたい&r"
				set click event of {_c} to a new click event to run command "/guild wizard help"
				add {_c} to {_m::*}
				set {_l} to merge components {_m::*}
				send component {_l} to the player
				delete {_m::*}
				# 3行目
				add a new text component from " &7> &r簡易クラフト・交易（ " to {_m::*}
				set {_c} to a new text component from "&b&nコンクリート&r"
				set click event of {_c} to a new click event to run command "/guild trade powderToConcrete"
				set hover event of {_c} to a new hover event showing "各種コンクリートパウダーをコンクリートへ一括変換する簡易クラフト画面を開きます%nl%（左官専用機能）"
				add {_c} to {_m::*}
				#add a new text component from " " to {_m::*}	# ただの空白
				#set {_c} to a new text component from "&b&n土系ブロック&r"
				#set click event of {_c} to a new click event to run command "/guild trade dirtTodirt"
				#set hover event of {_c} to a new hover event showing "一定の比率で，外国と土系ブロックを交換する交易画面を開きます%nl%（職業・場所によってレートが異なります）"
				#add {_c} to {_m::*}
				#add a new text component from " " to {_m::*}	# ただの空白
				#set {_c} to a new text component from "&b&n石系ブロック&r"
				#set click event of {_c} to a new click event to run command "/guild trade stoneToStone"
				#set hover event of {_c} to a new hover event showing "一定の比率で，外国と石系ブロックを交換する交易画面を開きます%nl%（職業・場所によってレートが異なります）"
				#add {_c} to {_m::*}
				#add to a new text component from " ）" to {_m::*}
				set {_c} to a new text component from " ）"
				add {_c} to {_m::*}
				set {_l} to merge components {_m::*}
				send component {_l} to the player
				delete {_m::*}
				# OP権限者はさらにコマンドが表示される
				if the player is op:
					# op1行目
					add a new text component from " &7> &r値の変更（"  to {_m::*}
					set {_c} to a new text component from "&7&n最終転職日&r"
					set click event of {_c} to a new click event to suggest command "/guild set day"
					set hover event of {_c} to a new hover event showing "指定プレイヤーの最終転職日を変更します。%nl%クリックして表示されるコマンドに続いて，対象者のIDと設定したい最終転職日を入力してください。"
					add {_c} to {_m::*}
					add a new text component from " " to {_m::*}	# ただの空白
					set {_c} to a new text component from "&7&n利権値&r"
					set click event of {_c} to a new click event to suggest command "/guild set rights"
					set hover event of {_c} to a new hover event showing "指定プレイヤーの利権値を変更します。%nl%クリックして表示されるコマンドに続いて，対象者のIDと設定したい利権値を入力してください。"
					add {_c} to {_m::*}
					add a new text component from " " to {_m::*}	# ただの空白
					set {_c} to a new text component from "&7&n職業&r"
					set click event of {_c} to a new click event to suggest command "/guild set rights"
					set hover event of {_c} to a new hover event showing "指定プレイヤーの職業を変更します。%nl%クリックして表示されるコマンドに続いて，対象者のIDと設定したい職業IDを入力してください。"
					add {_c} to {_m::*}
					add a new text component from " ） &r 値の加算（" to {_m::*}
					set {_c} to a new text component from "&7&n利権値&r"
					set click event of {_c} to a new click event to suggest command "/guild add rights"
					set hover event of {_c} to a new hover event showing "指定プレイヤーの利権値を加算します。%nl%クリックして表示されるコマンドに続いて，対象者のIDと加算したい利権値を入力してください。"
					add {_c} to {_m::*}
					add a new text component from " ）" to {_m::*}
					set {_l} to merge components {_m::*}
					send component {_l} to the player
					delete {_m::*}
					# op2行目
					add a new text component from " &7> " to {_m::*}
					set {_c} to a new text component from "&7&n統計&r"
					set click event of {_c} to a new click event to run command "/guild statistics"
					add {_c} to {_m::*}
					add a new text component from " " to {_m::*}	# ただの空白
					set {_c} to a new text component from "&7&n入植者情報&r"
					set click event of {_c} to a new click event to suggest command "/guild status"
					set hover event of {_c} to a new hover event showing "指定プレイヤーの情報を閲覧します。%nl%クリックして表示されるコマンドに続いて，対象者のIDを入力してください。"
					add {_c} to {_m::*}
					set {_l} to merge components {_m::*}
					send component {_l} to the player
					delete {_m::*}
				# コマンド入力者の現在の利権値を表示してあげる
				addRights(player, 0)
				stop
			# 第2引数"null"→転職ウィザードの表示
			else if {_action} is "change":
				# 1～2行目
				message "%{@guild display name}% 転職をご希望ですね。新しい職種を選んで下さい。" to the player
				set {_jobNow} to {guild::job::%player's uuid%}
				message " &7現在のあなたの職業は%{jobs::%{_jobNow}%::color}% %jobToJp({_jobNow})% &7です。" to the player # 2025/3/16 ぎまっち追加 転職前に現在の職業を表示
				# 3行目：職業リストを読み出して，各職業へ転職できるリンクを生成して返す
				add a new text component from " &7> " to {_m::*}
				set {_j::*} to the indexes of {jobs::*}
				loop {_j::*}:
					set {_color} to {jobs::%loop-value%::color}							# 職業リストから，テキスト装飾用カラーコードを取得。
					set {_name} to {jobs::%loop-value%::name}								# 職業リストから，職業の日本語名を取得。
					set {_desc} to {jobs::%loop-value%::changeDescription}	# 職業リストから，転職時の説明文を取得。
					set {_c} to a new text component from "%{_color}%&n%{_name}%&r"
					set click event of {_c} to a new click event to run command "/guild change %loop-value%"
					set hover event of {_c} to a new hover event showing "%{_desc}%"
					add {_c} to {_m::*}
					add a new text component from " " to {_m::*}	# ただの空白
				# (最後にテキストコンポーネントを統合して表示)
				set {_l} to merge components {_m::*}
				send component {_l} to the player
				delete {_m::*}
				stop
			# 第2引数"help"→ヘルプウィザードの表示
			else if {_action} is "help":
				# 1～2行目
				message "%{@guild display name}% 職業や利権について，知りたい内容をクリックしてください。" to the player
				set {_jobNow} to {guild::job::%player's uuid%}
				message " &7現在のあなたの職業は%{jobs::%{_jobNow}%::color}% %jobToJp({_jobNow})% &7です。" to the player # 2025/3/16 ぎまっち追加 転職前に現在の職業を表示
				# 3行目：職業リストを読み出して，概要説明 及び 各職業の説明を表示するリンクを生成して返す
				add a new text component from " &7> " to {_m::*}
				# (概要説明)
				set {_c} to a new text component from "&f&n概要説明&r"
				set click event of {_c} to a new click event to run command "/guild help"
				set hover event of {_c} to a new hover event showing "職業・利権システムについての概要を知りたい"
				add {_c} to {_m::*}
				add a new text component from " " to {_m::*}	# ただの空白
				# (各職業の説明：ループで生成)
				set {_j::*} to the indexes of {jobs::*}
				loop {_j::*}:
					set {_color} to {jobs::%loop-value%::color}							# 職業リストから，テキスト装飾用カラーコードを取得。
					set {_name} to {jobs::%loop-value%::name}								# 職業リストから，職業の日本語名を取得。
					set {_c} to a new text component from "%{_color}%&n%{_name}%&r"
					set click event of {_c} to a new click event to run command "/guild help %loop-value%"
					set hover event of {_c} to a new hover event showing "%{_name}%という職業について詳しく知りたい"
					add {_c} to {_m::*}
					add a new text component from " " to {_m::*}	# ただの空白
				# (最後にテキストコンポーネントを統合して表示)
				set {_l} to merge components {_m::*}
				send component {_l} to the player
				delete {_m::*}
				stop
		# 第1引数"change"→職を変更◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇
		else if {_order} is "change":
			setJobMyself(player, arg-2)
			exit
		# 第1引数"help"→ヘルプを表示◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆
		else if {_order} is "help":
			set {_job} to arg-2
			# 第2引数が，いずれかの職業IDと一致した場合，その職業の説明を表示
			if indexes of {jobs::*} contains {_job}:
				set {_name} to {jobs::%{_job}%::name}			# 職業リストから，職業の日本語名を取得。
				set {_color} to {jobs::%{_job}%::color}		# 職業リストから，テキスト装飾用カラーコードを取得。
				message "%{@guild display name}% 職業%{_color}%「%{_name}%」&rについてご説明します。" to the player
				loop {jobs::%{_job}%::descriptions::*}:
					message loop-value to the player
			# 第2引数が，いずれの職業IDとも一致しなかった場合，その概要説明を表示
			else:
				message "%{@guild display name}% 職業システムについてご説明します。" to the player
				message " &7●&r 当システムは，資源採集の高速化を実現するものです。" to the player
				message " &7●&r 就くことのできる職業は，以下の通りです。" to the player
				set {_j::*} to the indexes of {jobs::*}
				loop {_j::*}:
					set {_color} to {jobs::%loop-value%::color}		# 職業リストから，テキスト装飾用カラーコードを取得。
					set {_name} to {jobs::%loop-value%::name}			# 職業リストから，職業の日本語名を取得。
					message " &7 ○%{_color}% %{_name}% &r(%loop-value%)" to the player
				message " &7●&r 建材採集時に発動する特殊技を &l&b利権&r と称します。" to the player
				message "  利権を利用すると，一定の &l&b利権値&r を消費します。" to the player
				set {_jrd} to {@job rights on day}
				set {_mjr} to {@max job rights}
				message "  利権は日ごとに &a%{_jrd}%&r ずつ補充され，最大 &a%{_mjr}%&r まで貯まります。" to the player
				message "  現在のあなたの利権値は &a%{guild::jobRights::%the player's uuid%}%&r です。" to the player
				message " &7●&r 転職には，コマンド &l/guild change <職業ID>&r を入力します。" to the player
				message "  一度転職したあとは，&430日間は転職ができません&rのでご注意ください。" to the player
				# ▼日数差計算
				set {_today} to floor(unix timestamp of now / 86400)	# 本日を求める
				if {guild::lastJobChangeDay::%the player's uuid%} is not set:				# もし，ジョブチェンジ日の記録がなかった場合は，本日の日付を記録する。
					set {guild::lastJobChangeDay::%the player's uuid%} to 0
				set {_diff} to {_today} - {guild::lastJobChangeDay::%the player's uuid%}	# 最終ジョブチェンジ日と本日との日数差を求める
				# ▲
				message "  &7（前回あなたが転職してから &a%{_diff}%日&7 が経過しています）" to the player
			# ここから下は，どんなヘルプでも必ず最後に表示する
			set {_m::1} to a new text component from "%{@guild display name}% 他にご質問はございますか？ "
			set {_m::2} to a new text component from "&b&n質問したい&r"
			set click event of {_m::2} to a new click event to run command "/guild wizard help"
			set {_m::3} to a new text component from " "
			set {_m::4} to a new text component from "&b&nとくにない&r"
			set click event of {_m::4} to a new click event to run command "/guild wizard"
			set {_l} to merge components {_m::*}
			send component {_l} to the player
			delete {_m::*}
		# 第1引数"trade"→各種の交易画面を開く◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◆◇◆◇◆◇◆◇◆◇◆
		else if {_order} is "trade":
			set {_type} to arg-2
			showTrade({_type}, player)
		# 第1引数"set"→さまざまな値をセット(OP専用)◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◆◇◆◇◆◇◆◇
		else if {_order} is "set":
			# 条件チェック
			player is op
			# 本処理
			set {_v} to arg-2	# 変更したい変数の名前。「day」「rights（利権値）」「job（職業）」のみ許可される。
			set {_p} to arg-3 parsed as offlineplayers	# 変更されるプレイヤーのID
			# 前回に仕事を変更した日を変更
			if {_v} is "day":
				set {_a} to arg-4 parsed as number
				if {_p} is "all":
					loop all offlineplayers:
						setLastJobChangeDay(loop-value, {_a})
					message "%{@guild display name}% 全員の最終転職日を %{_r}% に設定しました。" to the player
				else:
					set {_r} to setLastJobChangeDay({_p}, {_a})
					message "%{@guild display name}% %{_p}%の最終転職日を %{_r}% に設定しました。" to the player
			# 利権値を変更
			else if {_v} is "rights":
				set {_a} to arg-4 parsed as number
				if {_p} is "all":
					loop all offlineplayers:
						set {_r} to setRights(loop-value, {_a})
					message "%{@guild display name}% 全員の利権値を %{_r}% に設定しました。" to the player
				else:
					set {_r} to setRights({_p}, {_a})
					message "%{@guild display name}% %{_p}%の利権値を %{_r}% に設定しました。" to the player
			# 職業を変更
			else if {_v} is "job":
				set {_a} to arg-4
				set {_r} to setJob({_p}, {_a})
				message "%{@guild display name}% %{_p}%の職業を %jobToJp({_r})% に設定しました。" to the player
			# 無効な指示
			else:
				message "%{@guild display name}% 変更したい値の指定が無効です。" to the player
		# 第1引数"add"→さまざまな値を加算(OP専用)◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◆◇◆◇◆◇◆◇◆
		else if {_order} is "add":
			# 条件チェック
			player is op
			# 本処理
			set {_v} to arg-2	# 変更したい変数の名前。「day」「rights（利権値）」「job（職業）」のみ許可される。
			set {_p} to arg-3 parsed as offlineplayers	# 変更されるプレイヤーのID
			# 利権値を加算
			if {_v} is "rights":
				set {_a} to arg-4 parsed as number
				if {_p} is "all":
					loop all offlineplayers:
						addRightsOnBackground(loop-value, {_a})
					message "%{@guild display name}% 全員の利権値に %{_a}% を加算しました。" to the player
				else:
					set {_r} to addRightsOnBackground({_p}, {_a})
					message "%{@guild display name}% %{_p}%の利権値に %{_a}% を加算して %{_r}% になりました。" to the player
		# 第1引数"statistics"→統計を見る(OP専用)◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◆◇◆◇◆◇◆◇◆◇
		else if {_order} is "statistics":
			# 条件チェック
			player is op
			# 本処理
			message "%{@guild display name}% 統計を表示します。" to the player
			# {guild::job::*}を回して，
			setJobStatistics()
			message " &7>&r アクティブ入植者数 %{jobActive::all}% 名" to the player
			message " &7>&r ・うち樵夫 %{jobActive::lumberjack}% 名（%round({jobRatio::lumberjack}*100)%％）" to the player
			message " &7>&r ・うち工匠 %{jobActive::craftsman}% 名（%round({jobRatio::craftsman}*100)%％）" to the player
			message " &7>&r ・うち坑夫 %{jobActive::miner}% 名（%round({jobRatio::miner}*100)%％）" to the player
			message " &7>&r ・うち左官 %{jobActive::plasterwork}% 名（%round({jobRatio::plasterwork}*100)%％）" to the player
			message " &7>&r ・うち無職 %{jobActive::unemployed}% 名（%round({jobRatio::unemployed}*100)%％）" to the player
		# 第1引数"status"→プレイヤーの情報を見る(OP専用)◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◆◇◆◇◆◇◆
		else if {_order} is "status":
			# 条件チェック
			player is op
			set {_p} to arg-2 parsed as offlineplayer
			getJobStatus({_p}, player)





# 【コマンド】エンチャント時に自動設定する名前を登録／削除／確認する
# （引数）登録（set）／削除(delete)／確認(show)，エンチャントのID，エンチャントされる道具のID，命名
command /autobrand <string> [<string> [<string> [<string> [<string>]]]]:
	trigger:
		set {_player} to the player
		set {_pid} to {_player}'s uuid
		set {_order} to arg-1
		# 第1引数"set"->エンチャント時の自動命名を設定
		# 第1引数"delete"->エンチャント時の自動命名を消去
		# 以下，2引数の共通処理
		if {_order} is "set" or "delete":
			# 条件チェック・エラーメッセージ
			# 引数2: エンチャントのID
			if arg-2 isn't set:
				message "%{@guild display name}% &4エンチャントIDが設定されていません。" to {_player}
				exit
			set {_enchantable} to arg-2
			if {uniqueEnchants::enchantable::*} don't contain {_enchantable}:
				message "%{@guild display name}% &4不正なエンチャントIDが設定されています。" to {_player}
				exit
			# 引数3: エンチャントされる道具のID
			else if arg-3 isn't set:
				message "%{@guild display name}% &4エンチャントされる道具のIDが設定されていません。" to {_player}
				exit
			set {_enchanted} to arg-3
			if {uniqueEnchants::enchanted::*} don't contain {_enchanted}:
				message "%{@guild display name}% &4不正なエンチャントされる道具のIDが設定されています。" to {_player}
				exit
			# これより，第1引数"delete"の単独処理->処理終了
			if {_order} is "delete":
				delete {guild::brand::%{_pid}%::%{_enchantable}%::%{_enchanted}%::*}
				message "%{@guild display name}% &e%{_enchanted}% &rに &d%{_enchantable}% &rを付与するときの自動命名設定を &6削除 &rしました。" to {_player}
				exit
			# これより，第1引数"set"の単独処理->処理終了
			# 引数4: 自動設定される名前
			if arg-4 isn't set:
				message "%{@guild display name}% &4自動でつけられる名前が設定されていません。" to {_player}
				exit
			set {_brand} to arg-4
			# 値（名前と光らせるかどうか）を保存
			set {guild::brand::%{_pid}%::%{_enchantable}%::%{_enchanted}%::brand} to {_brand}
			if arg-5 is "true" or "TRUE" or "1" or "on" or "ON":
				set {guild::brand::%{_pid}%::%{_enchantable}%::%{_enchanted}%::glint} to true
				set {_isGlint} to "&e光る"
			else:
				set {guild::brand::%{_pid}%::%{_enchantable}%::%{_enchanted}%::glint} to false
				set {_isGlint} to "&7光らない"
			message "%{@guild display name}% &e%{_enchanted}% &rに &d%{_enchantable}% &rを付与するときの設定を行いました。" to {_player}
			message " &7● &r自動命名: &b%{_brand}%  &7● &r発光: %{_isGlint}%"
			exit
		# 第1引数"show"->すでに設定されているエンチャント時の自動命名一覧を表示
		else if {_order} is "show":
			message "%{@guild display name}% 現在，あなたが設定している自動命名は次の通りです。" to {_player}
			set {_isntSet} to true
			# エンチャントIDで回す
			loop {uniqueEnchants::enchantable::*}:
				# エンチャントされる道具IDで回す
				loop {uniqueEnchants::enchanted::*}:
					if {guild::brand::%{_pid}%::%loop-value-1%::%loop-value-2%::*} is set:
						set {_brand} to {guild::brand::%{_pid}%::%loop-value-1%::%loop-value-2%::brand}
						if {guild::brand::%{_pid}%::%loop-value-1%::%loop-value-2%::glint} is true:
							set {_isGlint} to "&e(光る)"
						else:
							set {_isGlint} to "&7(光らない)"
						set {_isntSet} to false
						message "&7● &e%loop-value-1% &r+ &d%loop-value-2% &r-> &b%{_brand}% %{_isGlint}%" to {_player}
			# 全く設定されてなかったときと，1つでも設定されているときで最後のメッセージを変更する
			if {_isntSet} is true:
				message "%{@guild display name}% &6現在，自動命名設定は記録されていません。" to {_player}
			else:
				message "%{@guild display name}% &a以上。" to {_player}
			exit



# 【イベント】/autobrand コマンドの自動補完
on tab complete of "/autobrand":
	set tab completions for position 1 to "set", "delete" and "show"
	if tab arg-1 = "set" or "delete":
		set tab completions for position 2 to {uniqueEnchants::enchantable::*}
		set tab completions for position 3 to {uniqueEnchants::enchanted::*}
		if tab arg-1 = "set":
			set tab completions for position 5 to "true" and "false"



################################################################################
# 就職・転職の処理
################################################################################

# 【関数】プレイヤー自身での職を変更する
# （引数）プレイヤー（オフラインでも可），変更したい仕事
function setJobMyself(p: offlineplayer, job: text):
	set {_pid} to {_p}'s uuid
	set {_isChange} to false			# ▼前回の転職から30日経っていない場合は，キャンセル
	set {_today} to floor(unix timestamp of now / 86400)	# 本日を求める
	# もし，ジョブチェンジ日の記録がなかった場合は，本日の日付を記録する。
	if {guild::lastJobChangeDay::%{_pid}%} is not set:
		set {guild::lastJobChangeDay::%{_pid}%} to 0
	# 最終ジョブチェンジ日と本日との日数差を求め，最終ジョブチェンジ日から30日経っていない場合，警告を出して終了
	set {_diff} to {_today} - {guild::lastJobChangeDay::%{_pid}%}
	if {_diff} < 30:
		message "%{@guild display name}% &4転職は，前回の転職から30日以上が経過する必要があります&r。" to {_p}
		exit
	# 即時に仕事を変更して，ログを表示
	set {_r} to setJob({_p}, {_job})
	message "%{@guild display name}% あなたの職業を %jobToJp({_r})% に設定しました。" to {_p}
	# 本日の日付を記録する。
	set {guild::lastJobChangeDay::%{_pid}%} to {_today}



# 【関数】職業を即時に変更する
# （詳細）職業が変更されると，自動的にパーミッション周りも変更される
# （引数）職業を変更するプレイヤー，変更したい職業をIDで指定
# （返値）変更された職業の値
# （注意）無効な値を指定すると，無職を設定して返す
function setJob(p: offlineplayer, job: text):: text:
	set {_pid} to {_p}'s uuid
	# 樵夫への転職処理
	if {_job} is "lumberjack":
		set {guild::job::%{_pid}%} to "lumberjack"
		set {_r} to "lumberjack"
	# 工匠への転職処理
	else if {_job} is "craftsman":
		set {guild::job::%{_pid}%} to "craftsman"
		set {_r} to "craftsman"
	# 坑夫への転職処理
	else if {_job} is "miner":
		set {guild::job::%{_pid}%} to "miner"
		set {_r} to "miner"
	# 左官への転職処理
	else if {_job} is "plasterwork":
		set {guild::job::%{_pid}%} to "plasterwork"
		set {_r} to "plasterwork"
	# 失職処理
	else:
		set {guild::job::%{_pid}%} to "unemployed"
		set {_r} to "unemployed"
	return {_r}



# ◇■◇あるプレイヤーの職業利権に関する情報を得る◇■◇
# 《引数》情報を引き出したいプレイヤーのID
# 《返り値》なし
function getJobStatus(p: offlineplayer, s: player):
	set {_today} to floor(unix timestamp of now / 86400)				# 本日（1970/1/1＝0とする）
	set {_uuid} to {_p}'s uuid											# プレイヤーのUUID
	set {_lastLogIn} to {_today} - {guild::lastLogInDay::%{_uuid}%}			# プレイヤーが何日前にログインしたか
	set {_lastChange} to {_today} - {guild::lastJobChangeDay::%{_uuid}%}		# プレイヤーが何日前に転職したか
	# ログインが30日以上遠ざかっているときは「非アクティブアカウント」とする
	if {_lastLogIn} <= 30:
		set {_active} to true
		set {_activeJ} to "アクティブ"
	else:
		set {_active} to false
		set {_activeJ} to "非アクティブ"
	set {_name} to {_p}							# プレイヤーのID名
	set {_job} to {guild::job::%{_uuid}%}						# プレイヤーの職業
	set {_rights} to {guild::jobRights::%{_uuid}%}				# プレイヤーの保持利権値
	set {_valid} to {《v3からは使わないゾ》::%{_uuid}%}				# プレイヤーの利権使用スイッチ
	# 返り値にデータを放り込んでいく
	message "%{@guild display name}% %{_name}%（%{_activeJ}%）..." to {_s}
	message " &7>&r &n職業&r:%{_job}% &n保持利権値&r:%{_rights}% &nログイン&r:%{_lastLogIn}%日前 &n転職&r:%{_lastChange}%日前 &n利権スイッチ&r:%{_valid}%" to {_s}





# ◇■◇仕事・利権に関する統計を更新する◇■◇
# 《引数》なし
# 《返り値》なし
function setJobStatistics():
	# 返り値の準備
	set {jobActive::all} to 0				# アクティブなアカウント数
	set {jobActive::lumberjack} to 0		# アクティブな樵夫の数
	set {jobActive::earthwork} to 0			# アクティブな土工の数
	set {jobActive::miner} to 0				# アクティブな坑夫の数
	set {jobActive::plasterwork} to 0		# アクティブな左官の数
	set {jobActive::unemployed} to 0		# アクティブな無職の数
	# すべてのプレイヤーを回す
	loop all offlineplayers:
		continue if loop-value is banned	# BANされた人は統計情報に含めない
		transPlayerJobData(loop-value)		# 旧データを新データに移行
		set {_today} to floor(unix timestamp of now / 86400)				# 本日（1970/1/1＝0とする）
		set {_uuid} to loop-value's uuid									# プレイヤーのUUID
		set {_lastLogIn} to {_today} - {guild::lastLogInDay::%{_uuid}%}			# プレイヤーが何日前にログインしたか
		#set {_lastChange} to {_today} - {guild::lastJobChangeDay::%{_uuid}%}		# プレイヤーが何日前に転職したか
		# ログインが30日以上遠ざかっているときは「非アクティブアカウント」とする
		if {_lastLogIn} <= 30:
			set {_active} to true
			set {_activeJ} to "アクティブ"
		else:
			set {_active} to false
			set {_activeJ} to "非アクティブ"
		continue if {_active} is false		# 非アクティブユーザーは統計から外す
		set {_name} to loop-value							# プレイヤーのID名
		#set {_dName} to loop-value's display name			# プレイヤーの表示名
		set {_job} to {guild::job::%{_uuid}%}						# プレイヤーの職業
		#set {_rights} to {guild::jobRights::%{_uuid}%}			# プレイヤーの保持利権値
		#set {_valid} to {《v3からは使わないゾ》::%{_uuid}%}				# プレイヤーの利権使用スイッチ
		# 返り値にデータを放り込んでいく
		add 1 to {jobActive::all}		# アクティブなアカウント数を1加算
		if {_job} is "lumberjack":			# 樵夫ならば，その数を増やし，IDリストに追加
			add 1 to {jobActive::lumberjack}
			add {_name} to {_jl::*}
		if {_job} is "earthwork":			# 土工ならば，その数を増やし，IDリストに追加
			add 1 to {jobActive::earthwork}
			add {_name} to {je::*}
		if {_job} is "miner":				# 坑夫ならば，その数を増やし，IDリストに追加
			add 1 to {jobActive::miner}
			add {_name} to {jm::*}
		if {_job} is "plasterwork":			# 左官ならば，その数を増やし，IDリストに追加
			add 1 to {jobActive::plasterwork}
			add {_name} to {jp::*}
		if {_job} is "unemployed":			# 無職ならば，その数を増やし，IDリストに追加
			add 1 to {jobActive::unemployed}
			add {_name} to {ju::*}
		# broadcast "%{@guild display name}% %{_name}%（%{_activeJ}%）..."
		# broadcast " &7>&r &n職業&r:%{_job}% &n保持利権値&r:%{_rights}% &nログイン&r:%{_lastLogIn}%日前 &n転職&r:%{_lastChange}%日前 &n利権スイッチ&r:%{_valid}%"
	set {jobMember::lumberjack::*} to {_jl::*}
	set {jobMember::earthwork::*} to {_je::*}
	set {jobMember::miner::*} to {_jm::*}
	set {jobMember::plasterwork::*} to {_jp::*}
	set {jobMember::unemployed::*} to {_ju::*}
	set {jobRatio::lumberjack} to {jobActive::lumberjack} / {jobActive::all}
	set {jobRatio::earthwork} to {jobActive::earthwork} / {jobActive::all}
	set {jobRatio::miner} to {jobActive::miner} / {jobActive::all}
	set {jobRatio::plasterwork} to {jobActive::plasterwork} / {jobActive::all}
	set {jobRatio::unemployed} to {jobActive::unemployed} / {jobActive::all}














################################################################################
# 特殊な交易
################################################################################

# 【関数】指定プレイヤーに交易画面を表示する
# （引数）表示させたい交易画面の種類，交易画面を表示するプレイヤー
# （注意）
# 　・関数内では，プレイヤーが交易画面を開く条件を満たしているかどうかはチェックしません。
# 　・交易を実施したときに利権値を減らす等の処理は
function showTrade(type: text, player: player):
	# ①コンクリートの簡易生成
	if {_type} is "powderToConcrete":
		set {_merchant} to new merchant named "簡易クラフト（コンクリート）"
		# 色ループを回して，全色のコンクリートパウダーをコンクリートにするレシピを追加
		loop any concrete:
			set {_c} to loop-value
			set {_r} to "64 %{_c}%" parsed as item
			set {_a} to "64 %{_c}% powder" parsed as item
			set {_b} to "water bucket" parsed as item
			add getMerchantRecipe({_r}, {_a}, {_b}) to merchant recipes of {_merchant}
		open merchant {_merchant} to {_player}
		set {guild::openedMerchantType::%{_player}'s uuid%} to "powderToConcrete"
	# ②土系ブロックの交易
	else if {_type} is "dirtToDirt":
		set {_rate} to 4
		if {_player} has permission "sakuraft.earthwork":
			set {_rate} to 3
		set {_merchant} to new merchant named "交易（土系ブロック）"
		# 次のリストにあるアイテム同士を相互交易できるように
		set {_tradeList::*} to dirt, gravel, sand and red sand
		loop {_tradeList::*}:
			loop {_tradeList::*}:
				if loop-value-1 = loop-value-2:
					continue
				add getMerchantRecipe(loop-value-1, "%{_rate}% %loop-value-2%" parsed as item) to merchant recipes of {_merchant}
		open merchant {_merchant} to {_player}
		set {guild::openedMerchantType::%{_player}'s uuid%} to "dirtToDirt"
	# IDがどれにも引っかからなかったとき
	else:
		message "%{@guild display name}% &4交易の種類を指定する引数が不正です。" to {_player}



# 【関数】ひとつの「商人との取引内容」オブジェクトを生成して返す
# （引数）得られるアイテム，差し出すアイテム①［，差し出すアイテム②］
function getMerchantRecipe(r: material, a: material, b: material = air):: merchant recipe:
	set {_trade} to new merchant recipe with result {_r} with max uses 100000
	if {_b} is air:
		set ingredients of merchant recipe {_trade} to {_a}
	else:
		set ingredients of merchant recipe {_trade} to {_a} and {_b}
	return {_trade}



# 取引成立時に既定の利権値を没収したりする。
# ・利権値が足りていなければ，イベントはキャンセルされる（交易不能）
# ・コンクリートの簡易生成については，ガラス瓶を返却してやる
on player purchase:
	set {_type} to {guild::openedMerchantType::%player's uuid%}
	set {_rights} to {guild::jobRights::%the player's uuid%}
	# 消費利権値の設定
	# ①コンクリートの簡易生成
	if {_type} is "powderToConcrete":
		set {_required} to {@per rights on marchant powder to concrete}
	# ③工匠による仕事道具（武器系統）の生産
	#if {_type} is "manufactureWeaponForCraftsman":
	#	set {_required} to {@per rights on manufacture weapon}
	# ⑳その他
	else:
		set {_required} to 0
	# 利権値が足りない場合はイベント中止，そうでなければ利権値を減らす
	if {_rights} < {_required}:
		cancel the event
		exit
	addRights(player, -1 * {_required})
	# ガラス瓶の返却（①コンクリートの簡易生成）
	if {_type} is "powderToConcrete":
		give or drop a bucket to the player


# インベントリ（交易画面）を閉じたときには，開いている交易の種類を記録する変数を空にする
on inventory close:
	set {guild::openedMerchantType::%player's uuid%} to ""










################################################################################
# (v3)特殊な効果の発動
################################################################################

#-------------------------------------------------------------------------------
# カットオール（及び関連する関数群）
#-------------------------------------------------------------------------------

# 【イベント】樵夫が「カットオール」エンチャントのついた斧で原木を切った場合にCutAllを発動する
# ・樵夫専用エンチャント，&4
# （引数）表示させたい交易画面の種類，交易画面を表示するプレイヤー
# （注意）
# 　・v2までにあった「Shiftを押している」「利権発動ON」の条件はなくなった
# 　・専用のエンチャントがついている必要がある
on break of cutcut:
	set {_player} to the player
	set {_pid} to {_player}'s uuid
	# 条件チェック
	{_player}'s gamemode is survival																			# サバイバルモードであること
	{guild::job::%{_pid}%} is "lumberjack"																# プレイヤーが樵夫であること
	{guild::jobRights::%{_pid}%} >= {@per job rights lumberjack cutall}		# 利権値が足りていること
	{_player}'s tool is enchanted with guild_enchants:cut_all
	# 本処理
	damage player's tool by 1			# 手持ちの道具にダメージを1与える
	set {_nokori} to (maximum durability of {_player}'s tool) - ({_player}'s tool's damage)
	# 斧の耐久値がゼロになっている場合...
	if {_nokori} < 1:
		remove player's tool from player	# 斧を破壊
	# 利権を削る
	addRights(player, -1 * {@per job rights lumberjack cutall})
	cutByLumberjack(event-location, {_player})



# 【関数】CutAll
function cutByLumberjack(loc: location, player: player):
	loop blocks in radius 2 around {_loc}:
		# 当該ブロックが原木だった場合...
		if loop-block is cutcut:
			break loop-block using {_player}'s tool		# 手持ちの斧（チェーンソー）で原木を切ったことにする
			wait 1 tick
			cutByLumberjack(loop-block, {_player})
			cutLeave(loop-block)



# 【関数】CutLeave
function cutLeave(loc: location):
	loop blocks in radius 4 around {_loc}:
		if loop-block is leaves:
			wait 1 tick
			set block at loop-block to air





#-------------------------------------------------------------------------------
# 広域採掘
#-------------------------------------------------------------------------------

# 2025/06/09 SAKURAさんと話して次のように改良することとする。
# ◇3x3x1掘削のエンチャント本ではなく，すでに3x3x1のエンチャントがついた状態のアイテムをアドミンショップで販売する形式とする。
# ◎エンチャントは，現状のように「1000マス限定」ではなく，永続的なものに変更する。
# ◎3x3x1掘削では，ツルハシで掘るのに適切なブロックのみが壊されるようにし，たとえば土など，ツルハシで掘るのに適さないようなブロックはそもそも壊されないように改良。
# 修繕エンチャントは（事実上）つかないようにする。
# 掘削する場合には，一定の利権値が減少していく（1ブロックあたりで減らす）。ただし坑夫のみ利権値減少なし。
# 坑夫は，4倍量採掘能力と併用することが可能。
# 耐久値は，1ブロックで1減るのではなく，1掘削で1減るものとする。



# 下の「3x3掘削」を実現するために，ブロックを殴り始めた瞬間に，その殴った面（上下東西南北）を記録
on leftclick:
	# 条件チェックなし
	# 本処理
	set {_pid} to the player's uuid
	set {guild::latestPunchedDirection::%{_pid}%} to the event-direction



# 【イベント】「広域採掘」エンチャントのついたつるはしで石類を破砕した場合に広域採掘を発動する
# ・坑夫優遇エンチャント，&6
# （注意）
# 　・v2までにあった「利権発動ON」の条件はなくなった
# 　・専用のエンチャントがついている必要がある
on break:
	set {_player} to the player
	set {_pid} to {_player}'s uuid
	# 条件チェック
	{_player}'s gamemode is survival													# サバイバルモードであること
	{_player}'s tool is enchanted with guild_enchants:wide_mining
	# 本処理
	# 掘削したブロックを基準に，(2*エンチャントレベル+1) * (2*エンチャントレベル+1) * 1 のブロックを配列として取得
	# 側（東西南北）面を採掘した場合，高さ（Y）の基準点は下から2マスになる。
	set {_x} to the event-block's x-loc
	set {_y} to the event-block's y-loc
	set {_z} to the event-block's z-loc
	set {_lvl} to enchantment level of guild_enchants:wide_mining of {_player}'s tool		# エンチャントのレベルを取得
	if {guild::latestPunchedDirection::%{_pid}%} is above or below:
		set {_breaking::*} to the blocks within location({_x}-{_lvl}, {_y}, {_z}-{_lvl}, event-world) and location({_x}+{_lvl}, {_y}, {_z}+{_lvl}, event-world)
	else if {guild::latestPunchedDirection::%{_pid}%} is east or west:
		set {_breaking::*} to the blocks within location({_x}, {_y}-1, {_z}-{_lvl}, event-world) and location({_x}, {_y}+{_lvl}*2-1, {_z}+{_lvl}, event-world)
	else if {guild::latestPunchedDirection::%{_pid}%} is south or north:
		set {_breaking::*} to the blocks within location({_x}-{_lvl}, {_y}-1, {_z}, event-world) and location({_x}+{_lvl}, {_y}+{_lvl}*2-1, {_z}, event-world)
	delete {guild::latestPunchedDirection::%{_pid}%}
	# 配列のそれぞれのブロックについて，いろいろと判定
	loop {_breaking::*}:
		# ブロックが空気なら，そのブロックの処理は終わって，ほかのブロックの判定に移る
		if the loop-value is air:
			continue the loop
		# ブロックが「wide_mining_breakable」タグで指定されているブロックであれば，手持ちツールで破壊し，耐久度も1減らす
		# （この処理により「シルクタッチ」など他エンチャントも配列中のブロックすべてに対して適用される。ただし「修繕」エンチャントのみ機能しない）
		if the loop-value is tagged as tag "wide_mining_breakable":
			# 坑夫以外の職業では，利権値を消費する。不足時は処理中止。
			if {guild::job::%{_pid}%} isn't "miner":
				if {guild::jobRights::%{_pid}%} < {@per job rights wide mining} * {_lvl}:
					message "%{@guild display name}% &4利権値が底を尽きました。" to {_player}
					stop
				else:
					addRights(player, -1 * {@per job rights wide mining} * {_lvl})
			# ブロックを壊す実処理
			break loop-value with effects using player's tool
			remove 1 from the durability of the player's tool
	# もし耐久値が0以下ならばツールをぶち壊す
	if the durability of the player's tool <= 0:
		delete the player's tool
		play sound "entity.item.break" with volume 0.8 for the player





#-------------------------------------------------------------------------------
# 倍数ドロップ
#-------------------------------------------------------------------------------

# 【イベント】坑夫が「倍数ドロップ」エンチャントのついた道具で対象のブロックを破砕した場合にドロップ数を4倍とする
# ・坑夫専用エンチャント，&4
# （注意）
# 　・v2までにあった「利権発動ON」の条件はなくなった
# 　・専用のエンチャントがついている必要がある
on block drop:
	set {_player} to the player
	set {_pid} to {_player}'s uuid
	# 条件チェック（共通項）
	{_player}'s gamemode is survival																	# サバイバルモードであること
	{guild::job::%{_pid}%} is "miner"																	# プレイヤーが坑夫であること
	{_player}'s tool is enchanted with guild_enchants:special_drop		# プレイヤーが「倍数ドロップ」エンチャントのついた道具で採掘したこと
	the past event-block is tagged as tag "miner_mining_specials"			# 採掘したブロックが倍数ドロップの対象であること
	{guild::jobRights::%{_pid}%} >= {@per job rights miner mining}		# 利権値が足りていること
	# 本処理
	cancel the event																					# 通常のブロック破壊処理をキャンセルした上で...
	drop 4 of (event-items)																		# 規定の4倍量のアイテムをドロップし...
	set the event-block to air																# そのブロックを消す（空気に置き換える）
	addRights(player, -1 * {@per job rights miner mining})		# 利権値を消費



# 【イベント】左官が「倍数ドロップ」エンチャントのついた道具で対象のブロックを破砕した場合にドロップ数を3倍とする
# ・坑夫専用エンチャント，&4
# （注意）
# 　・v2までにあった「利権発動ON」の条件はなくなった
# 　・専用のエンチャントがついている必要がある
on block drop:
	set {_player} to the player
	set {_pid} to {_player}'s uuid
	# 条件チェック（共通項）
	{_player}'s gamemode is survival																				# サバイバルモードであること
	{guild::job::%{_pid}%} is "plasterwork"																	# プレイヤーが左官であること
	{_player}'s tool is enchanted with guild_enchants:special_drop					# プレイヤーが「倍数ドロップ」エンチャントのついた道具で採掘したこと
	the past event-block is tagged as tag "plasterwork_mining_specials"			# 採掘したブロックが倍数ドロップの対象であること
	{guild::jobRights::%{_pid}%} >= {@per job rights plasterwork mining}		# 利権値が足りていること
	# 本処理
	cancel the event																								# 通常のブロック破壊処理をキャンセルした上で...
	drop 3 of (event-items)																					# 規定の3倍量のアイテムをドロップし...
	set the event-block to air																			# そのブロックを消す（空気に置き換える）
	addRights(player, -1 * {@per job rights plasterwork mining})		# 利権値を消費





#-------------------------------------------------------------------------------
# ガンスラッシュ
#-------------------------------------------------------------------------------

# 【イベント】「ガンスラッシュ」エンチャントのついた道具でShift+左クリックをすると矢を高速射出する
# ・公共エンチャント，&a
# （注意）
# 　・専用のエンチャントがついている必要がある
on leftclick:
	set {_player} to the player
	set {_pid} to {_player}'s uuid
	# 条件チェック
	{_player}'s gamemode is survival															# サバイバルモードであること
	{_player} is sneaking																					# プレイヤーがShiftキーを押していること
	{_player}'s tool is enchanted with guild_enchants:gunslash		# プレイヤーが「ガンスラッシュ」エンチャントのついた道具で採掘したこと
	{_player} has 2 arrows																				# プレイヤーが2本以上の矢を持っていること
	{guild::jobRights::%{_pid}%} >= 20														# 利権値が足りていること {@per job rights shoot}
	# 本処理
	cancel the event								# 通常の処理（例：樹皮を剥がす）をキャンセルした上で...
	shoot an arrow at speed 10			# すごくすごい速度で1本の矢を射出（比較的まっすぐ飛んで行く）し...
	remove 2 arrows from {_player}	# プレイヤーから矢を2本奪い...
	addRights(player, -1 * 20)			# 利権値を消費





#-------------------------------------------------------------------------------
# 広域耕作
#-------------------------------------------------------------------------------

on rightclick:
	set {_player} to the player
	set {_pid} to {_player}'s uuid
	# 条件チェック
	the event-block is dirt or grass block or farmland										# 右クリックしたのが土or草ブロックor耕地であること
	{_player}'s tool is enchanted with guild_enchants:wide_cultivate			# プレイヤーが「広域耕作」エンチャントのついた道具で採掘したこと
	{guild::jobRights::%{_pid}%} >= 3																			# 利権値が足りていること {@per job rights cultivate}
	# 「道具が各種のクワである」という条件は，当該エンチャントが（サバイバルでは）クワにしか付与されないことで担保しているので不要
	cancel the event
	wait 1 tick		# 休憩を挟まないと以下のコードがうまく作動しない
	# 本処理
	# 掘削したブロックを基準に，X(2*エンチャントレベル+1) * Y1 * Z(2*エンチャントレベル+1) のブロックを配列として取得
	set {_x} to the event-block's x-loc
	set {_y} to the event-block's y-loc
	set {_z} to the event-block's z-loc
	set {_lvl} to enchantment level of guild_enchants:wide_cultivate of {_player}'s tool		# エンチャントのレベルを取得
	set {_plowing::*} to the blocks within location({_x}-{_lvl}, {_y}, {_z}-{_lvl}, event-world) and location({_x}+{_lvl}, {_y}, {_z}+{_lvl}, event-world)
	# 配列中のうち，条件に合うブロックについては耕地に変える
	loop {_plowing::*}:
		# 条件チェック
		the loop-value is dirt or grass block		# そのブロックが土か草ブロックであること
		the block above the loop-value is air		# そのひとつ上のブロックが空気であること
		# 本処理
		update the loop-value as farmland										# 耕地にする
		remove 1 from the durability of {_player}'s tool		# 道具（クワ）の耐久力を1減らす
		# 利権値の消費処理
		if {guild::jobRights::%{_pid}%} < 3 * {_lvl}:
			message "%{@guild display name}% &4利権値が底を尽きました。" to {_player}
			stop
		else:
			addRights({_player}, -1 * 3 * {_lvl})
	wait 1 tick		# 休憩をはさまないと以下のコードがうまく作動しない
	# 同じ配列中で，条件に合う耕地には苗を植える
	# (処理が野暮ったいが，より確実に動きそうなので，これで良い)
	loop {_plowing::*}:
		# 条件チェック
		the loop-value is farmland																			# そのブロックが耕地であること
		the block above the loop-value is air														# そのひとつ上のブロックが空気であること
		set {_seed} to the type of the off hand item of {_player}				# (ここではオフハンドアイテムのIDを取得している)
		{_seed} is wheat_seeds or carrot or potato or beetroot_seeds		# オフハンドアイテムが，小麦かビートルートの種，ニンジン，ジャガイモであること
		# 本処理
		# 以下8行では，持っているオフハンドアイテムのIDからブロックIDを取得している
		if off hand item of {_player} is wheat_seeds:
			set {_seeding} to wheat
		else if off hand item of {_player} is carrot:
			set {_seeding} to carrots
		else if off hand item of {_player} is potato:
			set {_seeding} to potatoes
		else if off hand item of {_player} is beetroot_seeds:
			set {_seeding} to beetroots
		set the block above the loop-value to {_seeding}	# この行で苗を植えている
		remove {_seed} from {_player}											# プレイヤーのインベントリから苗を1つ奪う
	# もし耐久値が0以下ならばツールをぶち壊す
	if the durability of {_player}'s tool <= 0:
		delete {_player}'s tool
		play sound "entity.item.break" with volume 0.8 for {_player}





#-------------------------------------------------------------------------------
# 広域収獲
#-------------------------------------------------------------------------------

on break:
	set {_player} to the player
	set {_pid} to {_player}'s uuid
	# 条件チェック
	the past event-block is wheat or carrots or potatoes or beetroots			# 破壊したものが，小麦，ビートルート，ニンジン，ジャガイモである
	{_player}'s tool is enchanted with guild_enchants:wide_harvest				# プレイヤーが「広域耕作」エンチャントのついた道具で採掘したこと
	{guild::jobRights::%{_pid}%} >= 1																			# 利権値が足りていること {@per job rights cultivate}
	cancel the event
	wait 1 tick		# 休憩を挟まないと以下のコードがうまく作動しない
	# 本処理
	# 壊したブロックを基準に，X(2*エンチャントレベル+1) * Y1 * Z(2*エンチャントレベル+1) のブロックを配列として取得
	set {_x} to the event-block's x-loc
	set {_y} to the event-block's y-loc
	set {_z} to the event-block's z-loc
	set {_lvl} to enchantment level of guild_enchants:wide_harvest of {_player}'s tool		# エンチャントのレベルを取得
	set {_blocks::*} to the blocks within location({_x}-{_lvl}, {_y}, {_z}-{_lvl}, event-world) and location({_x}+{_lvl}, {_y}, {_z}+{_lvl}, event-world)
	# 配列中のうち，条件に合うブロックについては破壊処理
	set {_harvestedQuantity} to 0			# 収獲ブロック数をカウント
	loop {_blocks::*}:
		if the loop-value is wheat or carrots or potatoes:
			if the age of the loop-value is 7:
				break the loop-value
				addRights({_player}, 9)
				add 1 to {_harvestedQuantity}
		else if the loop-value is beetroots:
			the age of the loop-value is 3:
				break the loop-value
				addRights({_player}, 6)
				add 1 to {_harvestedQuantity}
	# もし耐久値が0以下ならばツールをぶち壊す
	if the durability of {_player}'s tool <= 0:
		delete {_player}'s tool
		play sound "entity.item.break" with volume 0.8 for {_player}









################################################################################
# (v3)独自エンチャント時自動命名
################################################################################

# 【イベント】独自エンチャントを付与するとき，道具の名前に応じて道具の見た目を変更する
# (覚え書き)
# ・3つあるスロットは，左から，slot 0，slot 1，slot 2
# ・slot 0と1にアイテムを置いてから，slot 2に成果物が反映されるまで，1tick必要。
# 　このため，slot 2のアイテムを参照・変更する場合には，必ず1 tickを置くこと。
on anvil prepare:
	set {_player} to the player
	set {_pid} to {_player}'s uuid
	wait a tick		# 休憩をはさまないと以下のコードがうまく作動しない
	# エンチャント先のアイテムがすでに命名されている＝テキストボックスに文字列がある状態ならば，その文字列を予め取得しておく
	set {_item2} to the slot 2 of the event-inventory
	set {_name2} to the name of {_item2}
	# スロット2（完成予定品）のエンチャント一覧から，スロット0（元の製品）にすでにあるエンチャントを取り除いて，今回得る予定のエンチャントのみを抽出する
	set {_enchanting::*} to the slot 2 of the event-inventory's enchantments
	loop the slot 0 of the event-inventory's enchantments:
		remove loop-value from {_enchanting::*}
	# 今回つけられるエンチャントが独自IDならば，そのIDを取得。なければ今回の処理を終わる。
	set {_stringedEnchanting} to "%{_enchanting::*}%"		# 文字列を検索しやすいようにリスト変数をテキスト化
	loop {uniqueEnchants::enchantable::*}:
		if {_stringedEnchanting} contains loop-value:
			set {_enchantable} to loop-value
	if {_enchantable} isn't set:
		exit
	#message {_stringedEnchanting} to {_player}
	# スロット0の道具素材（日本語名）と道具種類（ID）を取得するset {uniqueEnchants::enchanted::*} to "axe", "boots", "chestplate", "helmet", "hoe", "leggings", "pickaxe", "shovel", "sword" and "shears"
	set {_stringedSlotZeroItem} to "%the slot 0 of the event-inventory%"				# データを文字列として検索しやすいようにアイテム名をテキスト化
	loop {uniqueEnchants::enchanted::*}:
		if {_stringedSlotZeroItem} contains loop-value:
			set {_enchanted} to loop-value
	if {_enchanted} isn't set:
		exit
	if {_stringedSlotZeroItem} contains "diamond":
		set {_toolmaterialJp} to "ダイヤモンド"
	else if {_stringedSlotZeroItem} contains "gold":
		set {_toolmaterialJp} to "金"
	else if {_stringedSlotZeroItem} contains "iron":
		set {_toolmaterialJp} to "鉄"
	else if {_stringedSlotZeroItem} contains "netherite":
		set {_toolmaterialJp} to "ネザライト"
	else if {_stringedSlotZeroItem} contains "stone":
		set {_toolmaterialJp} to "石"
	else if {_stringedSlotZeroItem} contains "wood":
		set {_toolmaterialJp} to "木"
	else if {_stringedSlotZeroItem} contains "copper":
		set {_toolmaterialJp} to "銅"
	#message "%{_enchantable}% %{_enchanted}%" to {_player}
	# スロット2（完成予定品）の道具に強制命名プラスCMDにも同じ名前を付与
	# エンチャント先のアイテムがすでに命名されている＝テキストボックスに文字列がある状態ならば，その名前を付与してやる
	if {_name2} is set:
		set {_brand} to {_name2}		# 命名設定を取得
		set {_glint} to false				# 非発光で固定
	# プレイヤーが独自命名を設定していれば，その名前を付与
	else if {guild::brand::%{_pid}%::%{_enchantable}%::%{_enchanted}%::*} is set:
		set {_brand} to {guild::brand::%{_pid}%::%{_enchantable}%::%{_enchanted}%::brand}		# 命名設定を取得
		set {_glint} to {guild::brand::%{_pid}%::%{_enchantable}%::%{_enchanted}%::glint}		# 発光／非発光を取得
	# 独自設定がなければデフォルト名を付与
	else:
		set {_brand} to {defaultBrand::%{_enchantable}%::%{_enchanted}%}								# 命名設定を取得
		set {_glint} to false																														# 非発光で固定
	replace "<material>" in {_brand} with {_toolmaterialJp}														# <material>部分を素材名に置換
	#message {_brand} to {_player}
	set {_product} to the slot 2 of the event-inventory																# 今のところ完成しているスロット2（完成予定品）の道具を取得
	set the name of {_product} to {_brand}																						# アイテム名を設定する
	if {_glint} is false:																															# 非発光を所望する場合には，発光フラグを降ろす
		force {_product} to stop glint
	else:
		force {_product} to glint																												# 発光を所望する場合には，発光フラグをつける
	set the custom model data strings of {_product} to {_brand}												# カスタムモデルデータにも同名を付与
	set the slot 2 of the event-inventory to {_product}																# そうして完成したアイテムをスロットに戻してやる










################################################################################
# (v3)収獲->利権値
################################################################################

# 【イベント】プレイヤー自身の手で，小麦，ビートルート，ニンジン，ジャガイモを収獲した場合，利権値を得られる
# ・つまり自動化された農園では利権値を取得できない
# ・広域収穫エンチャントで収穫を実施する場合にはこのイベントは発火しない（諸々の条件が違うし）
# (覚え書き)
# ・「on break」は，プレイヤーによる直接の行動のときにしか発火しない
# ・小麦，ニンジン，ジャガイモの作物の成長段階は8（0から7），ビートルートの成長段階は4（0から3）。
# 　成長の抽選回数が少ない分，ビートルとはわずかに早く成長する。
on break:
	set {_player} to the player
	set {_pid} to {_player}'s uuid
	if the past event-block is wheat or carrots or potatoes:
		if age of the past event-block is 7: # 小麦，ニンジン，ジャガイモの最大成長段階
			addRights({_player}, 10)
	else if the past event-block is beetroots:
		if age of the past event-block is 3: # ビートルートの最大成長段階
			addRights({_player}, 7)











################################################################################
# ユーティリティ
################################################################################

# ◇■◇利権値の増減◇■◇
function addRights(p: player, a: number):
	# 利権値をセットする。上限を超えたら上限値に調整，下限値を下回りそうなら下限値に調整
	set {_changed} to {guild::jobRights::%{_p}'s uuid%} + {_a}
	if {_changed} < 0:
		set {_changed} to 0
	if {_changed} > {@max job rights}:
		set {_changed} to {@max job rights}
	set {guild::jobRights::%{_p}'s uuid%} to {_changed}
	# ボスバーの作成
	set {_mjr} to {@max job rights}
	delete boss bar with id "rights_%{_p}'s uuid%"																				# skBee（前のは消す）
	set {_jobJp} to jobToJp({guild::job::%{_p}'s uuid%})
	set {_bossbar} to boss bar with id "rights_%{_p}'s uuid%" with title "【%{_jobJp}%】 利権値 %{_changed}% / %{_mjr}%" with color yellow		# skBee
	set bar style of {_bossbar} to segmented_20																					# skBee
	set bar progress of {_bossbar} to round({_changed} / {_mjr} * 100)															# skBee
	add {_p} to {_bossbar}																										# skBee
	# 5秒待つ
	wait 5 seconds
	# 現在の利権値と，記憶してた利権値が合っていれば，ボスバーを消す
	if {_changed} = {guild::jobRights::%{_p}'s uuid%}:
		delete boss bar with id "rights_%{_p}'s uuid%"	# skBee



# ◇■◇前回に仕事を変更した日を変更◇■◇
# 《引数》
#   p: 転職日を変更するプレイヤー名
#   a: 1970年1月1日を0とする転職日
# 《返り値》変更後の転職日を返す
function setLastJobChangeDay(p: offlineplayer, a: number):: number:
	set {_i} to {_p}'s uuid
	set {guild::lastJobChangeDay::%{_i}%} to {_a}
	#message "%{@guild display name}% %{_p}%の最終転職日を %{_a}% に設定しました。" to the player
	return {_a}



# ◇■◇利権値を変更◇■◇
# 《引数》
#   p: 利権値を変更するプレイヤー名
#   a: 利権値
#    ・最大値を上回る指定をすると，最大値を設定する
#    ・最小値（ゼロ）を下回る指定をすると，最小値（ゼロ）を設定する
# 《返り値》変更後の利権値を返す
function setRights(p: offlineplayer, a: number):: number:
	set {_i} to {_p}'s uuid
	if {_a} < 0:
		set {_a} to 0
	else if {_a} > {@max job rights}:
		set {_a} to {@max job rights}
	set {guild::jobRights::%{_i}%} to {_a}
	#message "%{@guild display name}% %{_p}%の利権値を %{_a}% に設定しました。" to the player
	return {_a}



# 【関数】即時に利権値を加算
# （詳細）負の値を指定すると，その絶対値ぶんだけ減算する
# （引数）
#   p: 利権値を加算するプレイヤー名
#   a: 加算したい利権値
#    ・負の値を指定すると，その絶対値ぶんだけ減算する
# （返値）変更後の利権値を返す
function addRightsOnBackground(p: offlineplayer, a: number):: number:
	set {_i} to {_p}'s uuid
	set {_rightsBefore} to {guild::jobRights::%{_i}%}
	return setRights({_p}, {_rightsBefore} + {_a})



# 【関数】職業IDから職業日本語名を返す
function jobToJp(id: text):: text:
	return {jobs::%{_id}%::name}
	#if {_id} is "lumberjack":
	#	set {_result} to "樵夫"
	#else if {_id} is "craftsman":
	#	set {_result} to "工匠"
	#else if {_id} is "earthwork":		# もはや必要ないが，念のため維持
	#	set {_result} to "土工"
	#else if {_id} is "miner":
	#	set {_result} to "坑夫"
	#else if {_id} is "plasterwork":
	#	set {_result} to "左官"
	#else:
	#	set {_result} to "無職"
	#return {_result}



# 【関数】旧データを新データに移行
# （補足）
# 　・v1 -> v2: リスト(連想配列)の記述方法を，Skript新方式に変更。
# 　・v2 -> v3:
# 　　・全てのリスト変数を，{guild::*}内に収めるようにした。
# 　　・利権使用スイッチを削除（試験の使用有無は，専用アイテムを使用するかどうかによって制御するようにしたため）
# 　　・職業が「土工」であった場合のみ，無職にする（職業「土工」は削除されたため）
function transPlayerJobData(player: offlineplayer):
	set {_pid} to {_player}'s uuid
	# v1 -> v2
	# ・転職日の移行。
	if {lastJobChangeDay.%{_player}%} is set:
		set {lastJobChangeDay::%{_pid}%} to {lastJobChangeDay.%{_player}%}
		delete {lastJobChangeDay.%{_player}%}
		message "%{@guild display name}% &e変数(v1)「最終転職日」を，新変数(v2)に移行しました。" to {_player}
	# ・利権値の移行。
	if {jobRights.%{_player}%} is set:
		set {jobRights::%{_pid}%} to {jobRights.%{_player}%} * 100
		delete {jobRights.%{_player}%}
		message "%{@guild display name}% &e変数(v1)「利権値」を，新変数(v2)に移行しました。" to {_player}
	# ・利権使用スイッチの移行。
	if {jobValid.%{_player}%} is set:
		set {jobValid::%{_pid}%} to {jobValid.%{_player}%}
		delete {jobValid.%{_player}%}
		message "%{@guild display name}% &e変数(v1)「利権有効化スイッチ」を，新変数(v2)に移行しました。" to {_player}
	# ・職業の移行。
	if {job.%{_player}%} is set:
		set {job::%{_pid}%} to {job.%{_player}%}
		delete {job.%{_player}%}
		message "%{@guild display name}% &e変数(v1)「職業」を，新変数(v2)に移行しました。" to {_player}
	# ・最終ログイン日の移行。
	if {lastLogInDayG.%{_player}%} is set:
		set {lastLogInDayG::%{_pid}%} to {lastLogInDayG.%{_player}%}
		delete {lastLogInDayG.%{_player}%}
	# v2 -> v3
	# ・転職日の移行。
	if {lastJobChangeDay::%{_player}%} is set:
		set {guild::lastJobChangeDay::%{_pid}%} to {lastJobChangeDay::%{_pid}%}
		delete {lastJobChangeDay::%{_pid}%}
		message "%{@guild display name}% &e変数(v2)「最終転職日」を，新変数(v3)に移行しました。" to {_player}
	# ・利権値の移行。
	if {jobRights::%{_pid}%} is set:
		set {guild::jobRights::%{_pid}%} to {jobRights::%{_pid}%} * 100
		delete {jobRights::%{_pid}%}
		message "%{@guild display name}% &e変数(v2)「利権値」を，新変数(v3)に移行しました。" to {_player}
	# ・利権使用スイッチの削除。
	if {jobValid::%{_pid}%} is set:
		delete {jobValid::%{_pid}%}
		message "%{@guild display name}% &e変数(v2)「利権有効化スイッチ」を削除しました。" to {_player}
	# ・職業の移行。
	if {job::%{_pid}%} is set:
		set {guild::job::%{_pid}%} to {job::%{_pid}%}
		delete {job::%{_pid}%}
		message "%{@guild display name}% &e変数(v2)「職業」を，新変数(v3)に移行しました。" to {_player}
	# ・最終ログイン日の移行。
	if {lastLogInDayG::%{_pid}%} is set:
		set {guild::lastLogInDay::%{_pid}%} to {lastLogInDayG::%{_pid}%}
		delete {lastLogInDayG::%{_pid}%}
	# ・職業「土工」の失職処置
	if {guild::job::%{_pid}%} = "earthwork":
		setJob({_player}, "unemployed")
		message "%{@guild display name}% &4&lあなたは職業「土工」を失職しました。" to {_player}
		message " このたび，土工ギルドが解散されたことに伴う処置となります。" to {_player}
		message " お手数ですが，改めて別の職業へ就くようお願い致します。" to {_player}



# 【イベント】ログイン時処理
# （詳細）
# 　・利権値の補充を行います。
on join:
	# 旧データを新データに移行
	transPlayerJobData(player)
	# 本日を求める
	set {_today} to floor(unix timestamp of now / 86400)
	# もし，ログインプレイヤーの最終ログイン日の記録がなかった場合は，本日の日付を記録する。
	if {guild::lastLogInDay::%the player's uuid%} is not set:
		set {guild::lastLogInDay::%the player's uuid%} to {_today}
	# 最終ログイン日と本日との日数差を求める
	set {_diff} to {_today} - {guild::lastLogInDay::%the player's uuid%}
	# 本日の日付を記録する。
	set {guild::lastLogInDay::%the player's uuid%} to {_today}
	# 日数差が1日以上あり，かつプレイヤーが給付上限利権値を持たない場合，利権値を給付
	if {_diff} >= 1:
		{guild::jobRights::%the player's uuid%} <= {@max job rights}
		set {_sum days} to min({_diff}, {@days max G})									# 何日分の給付を行うか，その日数を求める
		set {_handout max} to {@max job rights} - {guild::jobRights::%the player's uuid%}		# 給付上限プレイヤーの現利権値を求める
		set {_sum handout} to min({_sum days} * {@job rights on day}, {_handout max}) 	# 給付利権値の最大値を求める
		add {_sum handout} to {guild::jobRights::%the player's uuid%}							# 給付実施
		addRights(player, {_sum handout})
		message "%{@guild display name}% 利権値を &a%{_sum handout}%&r 給付しました。" to player
	addRights(player, 0)	# 起動時は利権値を見せる










